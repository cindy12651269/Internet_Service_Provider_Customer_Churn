# -*- coding: utf-8 -*-
"""GPT-4 Turbo_report.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mO4sqHGKGKgvSaA9T81A-EZUFIrGa7th
"""

import openai
import pandas as pd
import asyncio
from google.colab import userdata

# Use userdata.get to access secrets
api_key = userdata.get('openai_api_key')

# Set up OpenAI API key
openai.api_key = api_key

# Generate a GPT-4 Turbo report focused on customer analysis and retention strategy
def generate_gpt4_report(col):
    prompt = (
        f"Customer Info:\n- Contract: {col['remaining_contract']} months\n"
        f"- Avg Download: {col['download_avg']} GB\n"
        f"- Churn Probability: {col['churn']:.2f}\n"
        "Provide a brief analysis and suggest one retention strategy."
    )
    # Updated to use openai.chat.completions.create for OpenAI API versions >= 1.0.0
    response = openai.chat.completions.create(
        model="gpt-4-turbo",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=100
    )
    # Access the content from the correct path in the response
    return response.choices[0].message.content


# Filter high-risk customers and generate reports
def generate_sampled_reports(df):
    high_risk_customers = df[df['churn'] > 0.7]  # Select only high-risk customers (churn > 0.7)
    sample_size = min(20, len(high_risk_customers))  # Calculate sample size (maximum 20 or the number of available columns)
    sampled_df = high_risk_customers.sample(n=sample_size, replace=False)  # Randomly sample high-risk customers without replacement

    # Generate and display the report for each sampled customer
    for _, col in sampled_df.iterrows():
        report = generate_gpt4_report(col)
        print(f"High-Risk Customer Report:\n{report}\n")

# Test DataFrame
df = pd.DataFrame({
    'remaining_contract': [12, 3, 6, 24, 7, 15],  # Remaining contract duration in months
    'download_avg': [50.5, 30.0, 45.2, 80.3, 25.4, 60.7],  # Average download usage in GB
    'churn': [0.75, 0.85, 0.6, 0.9, 0.35, 0.8]  # Customer churn probability
})

# Run the sample report generation for high-risk customers
generate_sampled_reports(df)