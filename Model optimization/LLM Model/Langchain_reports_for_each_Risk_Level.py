# -*- coding: utf-8 -*-
"""Langchain_reports_for_each_Risk_Level.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mO4sqHGKGKgvSaA9T81A-EZUFIrGa7th
"""

from langchain import OpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from google.colab import userdata
import pandas as pd

# Use userdata.get to access secrets
api_key = userdata.get('openai_api_key')

# Set up OpenAI API key
openai.api_key = api_key

# Define prompt templates for each risk level
high_risk_template = PromptTemplate(
    input_variables=["churn", "remaining_contract"],
    template="High churn risk with a probability of {churn}. Contract: {remaining_contract} months. Reasons for dissatisfaction and recommendations?"
)

medium_risk_template = PromptTemplate(
    input_variables=["churn"],
    template="Moderate churn risk with a probability of {churn}. What are the recommended actions?"
)

low_risk_template = PromptTemplate(
    input_variables=["churn"],
    template="Low churn risk with a probability of {churn}. How to maintain satisfaction?"
)

# Create LLMChains for each risk level
llm = OpenAI(openai_api_key=api_key, temperature=0.4, max_tokens=500)
high_risk_chain = LLMChain(prompt=high_risk_template, llm=llm)
medium_risk_chain = LLMChain(prompt=medium_risk_template, llm=llm)
low_risk_chain = LLMChain(prompt=low_risk_template, llm=llm)

# Function to generate report based on churn risk level
def generate_single_report(risk_level, customer):
    if risk_level == "High":
        return high_risk_chain.run({"churn": customer['churn'], "remaining_contract": customer['remaining_contract']})
    elif risk_level == "Medium":
        return medium_risk_chain.run({"churn": customer['churn']})
    else:
        return low_risk_chain.run({"churn": customer['churn']})

# Display only one representative report per risk level
def display_single_reports(df):
    # Filter one example customer for each risk level
    high_risk_customer = df[df['churn'] > 0.7].iloc[0] if len(df[df['churn'] > 0.7]) > 0 else None
    medium_risk_customer = df[(df['churn'] > 0.4) & (df['churn'] <= 0.7)].iloc[0] if len(df[(df['churn'] > 0.4) & (df['churn'] <= 0.7)]) > 0 else None
    low_risk_customer = df[df['churn'] <= 0.4].iloc[0] if len(df[df['churn'] <= 0.4]) > 0 else None

    # Generate and display a report for each risk level, if available
    if high_risk_customer is not None:
        report = generate_single_report("High", high_risk_customer)
        print(f"High-Risk Customer Report (Churn={high_risk_customer['churn']}, Contract={high_risk_customer['remaining_contract']} months):\n{report}\n")

    if medium_risk_customer is not None:
        report = generate_single_report("Medium", medium_risk_customer)
        print(f"Medium-Risk Customer Report (Churn={medium_risk_customer['churn']}):\n{report}\n")

    if low_risk_customer is not None:
        report = generate_single_report("Low", low_risk_customer)
        print(f"Low-Risk Customer Report (Churn={low_risk_customer['churn']}):\n{report}\n")

# Sample DataFrame for testing
data = {
    'remaining_contract': [12, 3, 6, 24, 7, 15],
    'churn': [0.75, 0.85, 0.6, 0.9, 0.35, 0.8]
}
df = pd.DataFrame(data)

# Run and display one report for each risk level
display_single_reports(df)