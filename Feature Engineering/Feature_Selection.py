# -*- coding: utf-8 -*-
"""Feature_Selection.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mO4sqHGKGKgvSaA9T81A-EZUFIrGa7th
"""

import numpy as np
import pandas as pd

# Calculate the absolute correlation matrix
corr_matrix = df.corr().abs()

# Select the upper triangle of the correlation matrix, excluding the diagonal
upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(bool))

# Find highly correlated features (correlation > 0.8), excluding 'churn'
high_corr_features = [(column, upper[column][upper[column] > 0.8]) for column in upper.columns if any(upper[column] > 0.8) and column != 'churn']
print("Highly correlated features and their correlation values:")
for feature, corr_values in high_corr_features:
    print(f"{feature}: {corr_values.to_dict()}")

# Find features with low correlation (< 0.1) with 'churn'
low_corr_features = [(col, corr_matrix['churn'][col]) for col in corr_matrix.columns if corr_matrix['churn'].abs()[col] < 0.1 and col != 'churn']
print("Low correlation features and their correlation values with 'churn':")
for feature, corr_value in low_corr_features:
    print(f"{feature}: {corr_value}")

# Combine features to drop (both high and low correlation)
features_to_drop = [f[0] for f in high_corr_features + low_corr_features]

# Drop the features from the DataFrame with inplace=True to modify df directly
df.drop(columns=features_to_drop, inplace=True)

# Show remaining features after dropping
print("Remaining features after dropping:", df.columns)